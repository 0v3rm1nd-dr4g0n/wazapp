// checksum 0x898f version 0x70013
/*
  This file was generated by the Qt Quick Application wizard of Qt Creator.
  QmlApplicationViewer is a convenience class containing mobile device specific
  code such as screen orientation handling. Also QML paths and debugging are
  handled here.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

/***************************************************************************
**
** Copyright (c) 2012, Tarek Galal <tarek@wazapp.im>
**
** This file is part of Wazapp, an IM application for Meego Harmattan
** platform that allows communication with Whatsapp users.
**
** Wazapp is free software: you can redistribute it and/or modify it under
** the terms of the GNU General Public License as published by the
** Free Software Foundation, either version 2 of the License, or
** (at your option) any later version.
**
** Wazapp is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
** See the GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with Wazapp. If not, see http://www.gnu.org/licenses/.
**
****************************************************************************/

#ifndef QMLAPPLICATIONVIEWER_H
#define QMLAPPLICATIONVIEWER_H

#include <QtDeclarative/QDeclarativeView>
#include <QDeclarativeContext>
#include <QGraphicsObject>
#include <QDebug>

#include <AccountSetup/ProviderPluginProcess>
#include <accounts-qt/Accounts/Account>
#include <accounts-qt/Accounts/Manager>
#include "wacoderequest.h"
#include "waregrequest.h"
#include "smshandler.h"
#include <QThread>

class QmlApplicationViewer : public QDeclarativeView
{
    Q_OBJECT

public:
    enum ScreenOrientation {
        ScreenOrientationLockPortrait,
        ScreenOrientationLockLandscape,
        ScreenOrientationAuto
    };
    WId parentWindowId;

    explicit QmlApplicationViewer(QWidget *parent = 0);
    virtual ~QmlApplicationViewer();

    static QmlApplicationViewer *create();

    void setMainQmlFile(const QString &file);
    void addImportPath(const QString &path);

    // Note that this will only have an effect on Symbian and Fremantle.
    void setOrientation(ScreenOrientation orientation);

    void showExpanded();

    /************************ My additions *****************************/

   void debug(QString data);
   void init(int initType);

   QString *debug_data;
   QString curr_num;
   QString curr_cc;

   Q_INVOKABLE void registerAccount(QVariant cc, QVariant phoneNumber);

   Q_INVOKABLE void voiceCodeRequest(QVariant cc, QVariant phoneNumber);

   Q_INVOKABLE void regRequest(QVariant code);

    void createAccount(QString userId);

    Q_INVOKABLE void deleteAccount();

   Q_INVOKABLE void savePushName(QVariant pushName);
   Q_INVOKABLE void stopCodeRequest();

    Q_INVOKABLE void abraKadabra();


   Q_INVOKABLE QString getCc();

   Accounts::Account *account;
   Accounts::Manager *manager;

   void debugAccount(Accounts::AccountId id);

   bool isNew();


   /*******************************************************************/
public slots:

     void onAccountCreated(Accounts::AccountId id);
     void codeRequested();
     void codeReceived(QString);
     void onSuccess(QString);
     void onFail(QString);

signals:
     void statusUpdated(QVariant status);
     void registrationFailed(QVariant reason);
     void registrationSuccess(QString phoneNumber);
     void codeRequestCancelled();
     void voiceRequestCancelled();
     void voiceCodeRequested();

private:
    class QmlApplicationViewerPrivate *d;
    QString userId;
    QString cc;
    QString phoneNumber;
    int accountId;
     SmsHandler *handler;
     bool isActive;
     QThread handlerThread;

};

QApplication *createApplication(int &argc, char **argv);

#endif // QMLAPPLICATIONVIEWER_H
